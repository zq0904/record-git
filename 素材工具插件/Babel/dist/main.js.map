{"version":3,"sources":["../src/main.js"],"names":["map","console","log","e","a","b"],"mappings":"AAAA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUA,GAAV,CAAc;AAAA,SAAKC,QAAQC,GAAR,CAAYC,CAAZ,CAAL;AAAA,CAAd;AACA,IAAMC,IAAI,EAAV;AACA,IAAIC,IAAI,CAAR;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"main.js","sourcesContent":["[1, 2, 3].map(e => console.log(e))\r\nconst a = {}\r\nlet b = 1\r\n\r\n\r\n// 安装相应的转码规则\r\n// babel-preset-es2015 ES2015转码规则  babel-preset-react react转码规则 babel-preset-stage-0 ES7不同阶段语法提案的转码规则(0-3 共4个)\r\n// 配置 .babelrc\r\n// npm i -D babel-cli 本地安装命令行工具\r\n// 配置 package.json scripts字段 \"build\": \"babel src -s -d dist\"  -s 生成映射文件 -d 指定输出目录 -o 指定输出文件 -w 每次更改文件时编译文件 --ignore忽略文件\r\n\r\n// babel polyfill 有三种 babel-runtime babel-plugin-transfrom-runtime babel-polyfill\r\n \r\n// babel-runtime 每次要转码 手动添加require('babel-runtime') \r\n// babel-plugin-transform-runtime 自动由工具添加require('babel-runtime') 不会污染全局api 避免编译时重复\r\n// npm i -D babel-plugin-transform-runtime\r\n// npm i babel-runtime // 作为生产依赖\r\n// 在.babelrc中配置 \"plugins\": [\"transform-runtime\"]\r\n\r\n// babel-polyfill 是通过修改全局prototype来实现API的垫片的\r\n// Babel默认只转换新的JavaScript句法 而不转换新的API 如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象 及一些定义在全局对象上的方法(比如Object.assign)都不会转码\r\n// npm i babel-polyfill\r\n// webpack中配置entry: ['babel-polyfill', '...'] 或者 在入口文件 import 'babel-polyfill' 或者 require('babel-polyfill')\r\n\r\n// 浏览器环境中使用\r\n// npm i babel-standalone\r\n// <script src=\"./node_modules/babel-standalone/babel.min.js\"></script> 运行时编译 不推选\r\n// <script type=\"text/babel\"></script>\r\n"]}